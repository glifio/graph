// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Actor struct {
	ID        string `json:"id"`
	Code      string `json:"Code"`
	Head      string `json:"Head"`
	Nonce     string `json:"Nonce"`
	Balance   string `json:"Balance"`
	StateRoot string `json:"StateRoot"`
	Height    string `json:"Height"`
}

type Address struct {
	ID     string `json:"id"`
	Robust string `json:"robust"`
	Actor  *Actor `json:"actor"`
}

type MessageConfirmed struct {
	Cid                string   `json:"cid"`
	Height             int64    `json:"height"`
	StateRoot          string   `json:"stateRoot"`
	Version            int      `json:"version"`
	From               *Address `json:"from"`
	To                 *Address `json:"to"`
	Value              string   `json:"value"`
	GasFeeCap          string   `json:"gasFeeCap"`
	GasPremium         string   `json:"gasPremium"`
	GasLimit           int64    `json:"gasLimit"`
	SizeBytes          int      `json:"sizeBytes"`
	Nonce              uint64   `json:"nonce"`
	Method             uint64   `json:"method"`
	ActorName          string   `json:"actorName"`
	ActorFamily        string   `json:"actorFamily"`
	ExitCode           int64    `json:"exitCode"`
	GasUsed            int64    `json:"gasUsed"`
	ParentBaseFee      string   `json:"parentBaseFee"`
	BaseFeeBurn        string   `json:"baseFeeBurn"`
	OverEstimationBurn string   `json:"overEstimationBurn"`
	MinerPenalty       string   `json:"minerPenalty"`
	MinerTip           string   `json:"minerTip"`
	Refund             string   `json:"refund"`
	GasRefund          int64    `json:"gasRefund"`
	GasBurned          int64    `json:"gasBurned"`
}

type MessagePending struct {
	Cid        string   `json:"cid"`
	Version    *int     `json:"version"`
	To         *Address `json:"to"`
	From       *Address `json:"from"`
	Nonce      *string  `json:"nonce"`
	Value      float64  `json:"value"`
	GasLimit   *string  `json:"gasLimit"`
	GasFeeCap  *string  `json:"gasFeeCap"`
	GasPremium *string  `json:"gasPremium"`
	Method     string   `json:"method"`
	Height     float64  `json:"height"`
	Params     *string  `json:"params"`
}

type NewTodo struct {
	Text   string `json:"text"`
	UserID string `json:"userId"`
}

type QueryMessage struct {
	Messages []*Message `json:"messages"`
}

type QueryUser struct {
	Users []*User `json:"users"`
}

type User struct {
	ID   string `json:"id"`
	Name string `json:"name"`
}

type FilUnit string

const (
	FilUnitFil      FilUnit = "Fil"
	FilUnitAttoFil  FilUnit = "AttoFil"
	FilUnitFemtoFil FilUnit = "FemtoFil"
	FilUnitPicoFil  FilUnit = "PicoFil"
	FilUnitNanoFil  FilUnit = "NanoFil"
)

var AllFilUnit = []FilUnit{
	FilUnitFil,
	FilUnitAttoFil,
	FilUnitFemtoFil,
	FilUnitPicoFil,
	FilUnitNanoFil,
}

func (e FilUnit) IsValid() bool {
	switch e {
	case FilUnitFil, FilUnitAttoFil, FilUnitFemtoFil, FilUnitPicoFil, FilUnitNanoFil:
		return true
	}
	return false
}

func (e FilUnit) String() string {
	return string(e)
}

func (e *FilUnit) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FilUnit(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FilUnit", str)
	}
	return nil
}

func (e FilUnit) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
