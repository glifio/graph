# GraphQL schema glif graph
#
# https://gqlgen.com/getting-started/

scalar Int64
scalar Uint64

type Query {
  status: Status!
  block(address: String!, height: Int64!): Block!
  tipset(height: Uint64!): TipSet
  message(cid: String!, height: Int): Message
  messages(address: String, limit: Int = 10, offset: Int = 0): [Message]
  messagesByHeight(height: Uint64!, limit: Int = 10, offset: Int = 0): [Message]
  pendingMessage(cid: String!): MessagePending #mempool
  pendingMessages(address: String): [MessagePending!]! #mempool
  mpoolPending(address: String): [MpoolUpdate!]! #mempool
  messagesConfirmed(
    address: String
    limit: Int = 5
    offset: Int = 0
  ): [MessageConfirmed!]! # lily
  address(str: String!): Address
  gascost(cid: String!): GasCost
  receipt(cid: String!): MessageReceipt
  executionTrace(cid: String!): ExecutionTrace
  stateReplay(cid: String!): InvocResult
  actor(address: String!): Actor
  actors: [Actor!]!
  msigPending(address: String!): [MsigTransaction!]!
  stateListMessages(address: String!, lookback: Int = 50): [MessageConfirmed]
  messageLowConfidence(cid: String!): MessageConfirmed!
}

type Subscription {
  messages: [Message!]
  chainHead: ChainHead!
  mpoolUpdate(address: String): MpoolUpdate!
  status: Status!
}

# Units of height
enum FilUnit {
  Fil
  AttoFil
  FemtoFil
  PicoFil
  NanoFil
}

type ChainHead {
  height: Int64!
}

type Status {
  height: Int64!
  estimate: Int64!
}

type MpoolUpdate {
  type: Int!
  message: MessagePending!
}

type TipSet {
  cids: [String!]
  blks: [Block!]
  height: Int64!
  key: String!
  minTimestamp: Uint64!
}

type Message {
  cid: String!
  version: Uint64!
  to: Address!
  from: Address!
  nonce: Uint64!
  #value(unit: FilUnit = AttoFil): Float!
  value: String!
  gasLimit: Int64!
  gasFeeCap: String!
  gasPremium: String!
  method: Uint64!
  height: Uint64!
  params: String!
  gasCost: GasCost!
  receipt: MessageReceipt!
}

type InvocResult {
  gasCost: GasCost
  receipt: MessageReceipt
  executionTrace: ExecutionTrace
}

type GasCost {
  gasUsed: Int64!
  baseFeeBurn: String!
  overEstimationBurn: String!
  minerPenalty: String!
  minerTip: String!
  refund: String!
  totalCost: String!
}

type ExecutionTrace {
  executionTrace: String!
}

type MessageReceipt {
  exitCode: Int64!
  return: String!
  gasUsed: Int64!
}

type MessagePending {
  cid: String!
  version: String!
  to: Address!
  from: Address!
  nonce: Uint64!
  #value(unit: FilUnit = AttoFil): Float!
  value: String!
  gasLimit: String
  gasFeeCap: String
  gasPremium: String
  method: Uint64!
  height: Int64!
  params: String!
}

type MessageConfirmed {
  cid: String!
  height: Int64!
  stateRoot: String!
  version: Int!
  from: Address!
  to: Address!
  #value(unit: FilUnit = AttoFil): Float!
  value: String!
  gasFeeCap: String!
  gasPremium: String!
  gasLimit: Int64!
  sizeBytes: Int!
  nonce: Uint64!
  method: Uint64!
  methodName: String!
  actorName: String!
  actorFamily: String!
  exitCode: Int64!
  gasUsed: Int64!
  parentBaseFee: String!
  baseFeeBurn: String!
  overEstimationBurn: String!
  minerPenalty: String!
  minerTip: String!
  refund: String!
  gasRefund: Int64!
  gasBurned: Int64!
  block: Block!
  params: String!
}

type MsigTransaction {
  id: Int64!
  to: Address!
  value: String!
  method: Uint64!
  params: String!
  approved: [Address!]
  proposalHash: String!
}

type Address {
  id: ID!
  robust: String!
  #actor: Actor!
}

type Actor {
  id: ID!
  Code: String!
  Head: String!
  Nonce: Uint64!
  Balance(unit: FilUnit = AttoFil): String!
  StateRoot: String!
  Height: Int64!
}

type Block {
  cid: String!
  height: Int64!
  miner: String!
  parents: [String!]
  parentWeight: String!
  parentBaseFee: String!
  parentStateRoot: String!
  winCount: Int64
  messages: String!
  timestamp: Uint64!
  forkSignaling: Uint64
}

type QueryMessage {
  messages: [Message!]!
}
