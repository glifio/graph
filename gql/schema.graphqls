# GraphQL schema glif graph
#
# https://gqlgen.com/getting-started/

scalar Int64
scalar Uint64

type Query {
  todos: [Todo!]!
  block(address: String!, height: Int64!): Block!
  message(cid: String): MessageConfirmed!
  messages(address: String, limit: Int = 5, offset: Int = 0): [Message!]!
  pendingMessages(
    address: String
    limit: Int = 5
    offset: Int = 0
  ): [MessagePending!]! #mempool
  messagesConfirmed(
    address: String
    limit: Int = 5
    offset: Int = 0
  ): [MessageConfirmed!]! # lily
  address(str: String!): Address
  actor(address: String!): Actor
  actors: [Actor!]!
}

type Mutation {
  createTodo(input: NewTodo!): Todo!
}

type Subscription {
  messages: [Message!]
}

# Units of height
enum FilUnit {
  Fil
  AttoFil
  FemtoFil
  PicoFil
  NanoFil
}

type Todo {
  id: ID!
  text: String!
  done: Boolean!
  user: User!
  actor: Actor!
}

type Message {
  cid: String!
  version: Int
  to: Actor!
  from: Actor!
  nonce: String
  #value(unit: FilUnit = AttoFil): Float!
  value: Float!
  gasLimit: String
  gasFeeCap: String
  gasPremium: String
  method: String!
  height: Float!
  params: String
}

type MessagePending {
  cid: String!
  version: Int
  to: Address!
  from: Address!
  nonce: String
  #value(unit: FilUnit = AttoFil): Float!
  value: Float!
  gasLimit: String
  gasFeeCap: String
  gasPremium: String
  method: String!
  height: Float!
  params: String
}

type MessageConfirmed {
  cid: String!
  height: Int64!
  stateRoot: String!
  version: Int!
  from: Address!
  to: Address!
  #value(unit: FilUnit = AttoFil): Float!
  value: String!
  gasFeeCap: String!
  gasPremium: String!
  gasLimit: Int64!
  sizeBytes: Int!
  nonce: Uint64!
  method: Uint64!
  actorName: String!
  actorFamily: String!
  exitCode: Int64!
  gasUsed: Int64!
  parentBaseFee: String!
  baseFeeBurn: String!
  overEstimationBurn: String!
  minerPenalty: String!
  minerTip: String!
  refund: String!
  gasRefund: Int64!
  gasBurned: Int64!
  block: Block!
}

type Address {
  id: ID!
  robust: String!
  #actor: Actor!
}

type Actor {
  id: ID!
  Code: String!
  Head: String!
  Nonce: String!
  Balance(unit: FilUnit = AttoFil): String!
  StateRoot: String!
  Height: String!
}

type Block {
  Cid: String!
  Height: Int64!
  Miner: String!
  ParentWeight: String!
  ParentBaseFee: String!
  ParentStateRoot: String!
  WinCount: Int64
  Timestamp: Uint64
  ForkSignaling: Uint64
}

type User {
  id: ID!
  name: String!
}

type QueryMessage {
  messages: [Message!]!
}

type QueryUser {
  users: [User!]!
}

input NewTodo {
  text: String!
  userId: String!
}
