// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package daemon

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DaemonClient is the client API for Daemon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DaemonClient interface {
	// Sends a greeting
	Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncReply, error)
	SyncTipset(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncReply, error)
	SyncMessages(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncReply, error)
	SyncAddress(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncReply, error)
	SyncIndex(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncReply, error)
	SyncLily(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncReply, error)
	SyncValidate(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncReply, error)
	KvDel(ctx context.Context, in *KvRequest, opts ...grpc.CallOption) (*KvReply, error)
	KvGet(ctx context.Context, in *KvRequest, opts ...grpc.CallOption) (*KvReply, error)
	KvMatch(ctx context.Context, in *KvRequest, opts ...grpc.CallOption) (*KvReply, error)
}

type daemonClient struct {
	cc grpc.ClientConnInterface
}

func NewDaemonClient(cc grpc.ClientConnInterface) DaemonClient {
	return &daemonClient{cc}
}

func (c *daemonClient) Sync(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncReply, error) {
	out := new(SyncReply)
	err := c.cc.Invoke(ctx, "/daemon.Daemon/Sync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) SyncTipset(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncReply, error) {
	out := new(SyncReply)
	err := c.cc.Invoke(ctx, "/daemon.Daemon/SyncTipset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) SyncMessages(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncReply, error) {
	out := new(SyncReply)
	err := c.cc.Invoke(ctx, "/daemon.Daemon/SyncMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) SyncAddress(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncReply, error) {
	out := new(SyncReply)
	err := c.cc.Invoke(ctx, "/daemon.Daemon/SyncAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) SyncIndex(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncReply, error) {
	out := new(SyncReply)
	err := c.cc.Invoke(ctx, "/daemon.Daemon/SyncIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) SyncLily(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncReply, error) {
	out := new(SyncReply)
	err := c.cc.Invoke(ctx, "/daemon.Daemon/SyncLily", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) SyncValidate(ctx context.Context, in *SyncRequest, opts ...grpc.CallOption) (*SyncReply, error) {
	out := new(SyncReply)
	err := c.cc.Invoke(ctx, "/daemon.Daemon/SyncValidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) KvDel(ctx context.Context, in *KvRequest, opts ...grpc.CallOption) (*KvReply, error) {
	out := new(KvReply)
	err := c.cc.Invoke(ctx, "/daemon.Daemon/KvDel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) KvGet(ctx context.Context, in *KvRequest, opts ...grpc.CallOption) (*KvReply, error) {
	out := new(KvReply)
	err := c.cc.Invoke(ctx, "/daemon.Daemon/KvGet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonClient) KvMatch(ctx context.Context, in *KvRequest, opts ...grpc.CallOption) (*KvReply, error) {
	out := new(KvReply)
	err := c.cc.Invoke(ctx, "/daemon.Daemon/KvMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DaemonServer is the server API for Daemon service.
// All implementations must embed UnimplementedDaemonServer
// for forward compatibility
type DaemonServer interface {
	// Sends a greeting
	Sync(context.Context, *SyncRequest) (*SyncReply, error)
	SyncTipset(context.Context, *SyncRequest) (*SyncReply, error)
	SyncMessages(context.Context, *SyncRequest) (*SyncReply, error)
	SyncAddress(context.Context, *SyncRequest) (*SyncReply, error)
	SyncIndex(context.Context, *SyncRequest) (*SyncReply, error)
	SyncLily(context.Context, *SyncRequest) (*SyncReply, error)
	SyncValidate(context.Context, *SyncRequest) (*SyncReply, error)
	KvDel(context.Context, *KvRequest) (*KvReply, error)
	KvGet(context.Context, *KvRequest) (*KvReply, error)
	KvMatch(context.Context, *KvRequest) (*KvReply, error)
	mustEmbedUnimplementedDaemonServer()
}

// UnimplementedDaemonServer must be embedded to have forward compatible implementations.
type UnimplementedDaemonServer struct {
}

func (UnimplementedDaemonServer) Sync(context.Context, *SyncRequest) (*SyncReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sync not implemented")
}
func (UnimplementedDaemonServer) SyncTipset(context.Context, *SyncRequest) (*SyncReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncTipset not implemented")
}
func (UnimplementedDaemonServer) SyncMessages(context.Context, *SyncRequest) (*SyncReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncMessages not implemented")
}
func (UnimplementedDaemonServer) SyncAddress(context.Context, *SyncRequest) (*SyncReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncAddress not implemented")
}
func (UnimplementedDaemonServer) SyncIndex(context.Context, *SyncRequest) (*SyncReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncIndex not implemented")
}
func (UnimplementedDaemonServer) SyncLily(context.Context, *SyncRequest) (*SyncReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncLily not implemented")
}
func (UnimplementedDaemonServer) SyncValidate(context.Context, *SyncRequest) (*SyncReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncValidate not implemented")
}
func (UnimplementedDaemonServer) KvDel(context.Context, *KvRequest) (*KvReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KvDel not implemented")
}
func (UnimplementedDaemonServer) KvGet(context.Context, *KvRequest) (*KvReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KvGet not implemented")
}
func (UnimplementedDaemonServer) KvMatch(context.Context, *KvRequest) (*KvReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KvMatch not implemented")
}
func (UnimplementedDaemonServer) mustEmbedUnimplementedDaemonServer() {}

// UnsafeDaemonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DaemonServer will
// result in compilation errors.
type UnsafeDaemonServer interface {
	mustEmbedUnimplementedDaemonServer()
}

func RegisterDaemonServer(s grpc.ServiceRegistrar, srv DaemonServer) {
	s.RegisterService(&Daemon_ServiceDesc, srv)
}

func _Daemon_Sync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).Sync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.Daemon/Sync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).Sync(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_SyncTipset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).SyncTipset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.Daemon/SyncTipset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).SyncTipset(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_SyncMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).SyncMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.Daemon/SyncMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).SyncMessages(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_SyncAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).SyncAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.Daemon/SyncAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).SyncAddress(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_SyncIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).SyncIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.Daemon/SyncIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).SyncIndex(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_SyncLily_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).SyncLily(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.Daemon/SyncLily",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).SyncLily(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_SyncValidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).SyncValidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.Daemon/SyncValidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).SyncValidate(ctx, req.(*SyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_KvDel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).KvDel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.Daemon/KvDel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).KvDel(ctx, req.(*KvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_KvGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).KvGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.Daemon/KvGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).KvGet(ctx, req.(*KvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Daemon_KvMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServer).KvMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/daemon.Daemon/KvMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServer).KvMatch(ctx, req.(*KvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Daemon_ServiceDesc is the grpc.ServiceDesc for Daemon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Daemon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "daemon.Daemon",
	HandlerType: (*DaemonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sync",
			Handler:    _Daemon_Sync_Handler,
		},
		{
			MethodName: "SyncTipset",
			Handler:    _Daemon_SyncTipset_Handler,
		},
		{
			MethodName: "SyncMessages",
			Handler:    _Daemon_SyncMessages_Handler,
		},
		{
			MethodName: "SyncAddress",
			Handler:    _Daemon_SyncAddress_Handler,
		},
		{
			MethodName: "SyncIndex",
			Handler:    _Daemon_SyncIndex_Handler,
		},
		{
			MethodName: "SyncLily",
			Handler:    _Daemon_SyncLily_Handler,
		},
		{
			MethodName: "SyncValidate",
			Handler:    _Daemon_SyncValidate_Handler,
		},
		{
			MethodName: "KvDel",
			Handler:    _Daemon_KvDel_Handler,
		},
		{
			MethodName: "KvGet",
			Handler:    _Daemon_KvGet_Handler,
		},
		{
			MethodName: "KvMatch",
			Handler:    _Daemon_KvMatch_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/daemon/daemon.proto",
}
